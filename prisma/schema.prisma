// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  superadmin
  user
  trainer
}

model User {
  id                   String                 @id @default(uuid())
  username             String                 @unique
  name                 String
  password             String?
  avatar               Json?
  role                 Role
  workPositionId       String
  workPosition         WorkPosition           @relation(fields: [workPositionId], references: [id])
  Course               Course[]
  CourseForum          CourseForum[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now())
  CourseProgress       CourseProgress[]
  CourseUserLastLesson CourseUserLastLesson[]
  CourseForumReply     CourseForumReply[]
}

model WorkPosition {
  id        String   @id @default(uuid())
  name      String
  User      User[]
  Course    Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum CourseStatus {
  draft
  published
  archive
}

model Course {
  id                   String                 @id @default(uuid())
  name                 String
  slug                 String                 @unique
  description          String?
  thumbnailUrl         String
  trailerUrl           String?
  hideTrailer          Boolean
  trainerId            String
  trainer              User                   @relation(fields: [trainerId], references: [id])
  categoryId           String
  category             WorkPosition           @relation(fields: [categoryId], references: [id])
  keypoints            Json?
  enableForum          Boolean
  chapters             CourseChapter[]
  CourseForum          CourseForum[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now())
  deleted              Boolean                @default(false)
  status               CourseStatus           @default(draft)
  CourseProgress       CourseProgress[]
  CourseUserLastLesson CourseUserLastLesson[]
  CourseForumReply     CourseForumReply[]
}

model CourseChapter {
  id        String         @id @default(uuid())
  name      String
  order     Int
  course    Course         @relation(fields: [courseId], references: [id])
  courseId  String
  lessons   CourseLesson[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  deleted   Boolean        @default(false)
}

enum CourseLessonType {
  VIDEO
  DOCUMENT
}

model CourseLesson {
  id                   String                 @id @default(uuid())
  name                 String
  order                Int
  lessonType           CourseLessonType
  contentUrl           String
  chapter              CourseChapter          @relation(fields: [chapterId], references: [id])
  chapterId            String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now())
  deleted              Boolean                @default(false)
  CourseProgress       CourseProgress[]
  CourseUserLastLesson CourseUserLastLesson[]
}

model CourseForum {
  id               String             @id @default(uuid())
  content          String
  courseId         String
  course           Course             @relation(fields: [courseId], references: [id])
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  CourseForumReply CourseForumReply[]
}

model CourseForumReply {
  id        String      @id @default(uuid())
  content   String
  parent    CourseForum @relation(fields: [parentId], references: [id])
  parentId  String
  courseId  String
  course    Course      @relation(fields: [courseId], references: [id])
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
}

model CourseProgress {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  lesson         CourseLesson @relation(fields: [courseLessonId], references: [id])
  courseLessonId String       @unique
  course         Course       @relation(fields: [courseId], references: [id])
  courseId       String
  isCompleted    Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
}

model CourseUserLastLesson {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  course         Course       @relation(fields: [courseId], references: [id])
  courseId       String
  lesson         CourseLesson @relation(fields: [courseLessonId], references: [id])
  courseLessonId String
  userId         String       @unique
}
